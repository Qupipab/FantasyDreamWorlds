// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Entities.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Entities.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("EnTitle")
                        .HasColumnType("text");

                    b.Property<int>("GameServerId")
                        .HasColumnType("integer");

                    b.Property<string>("RuTitle")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("GameServerId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            EnTitle = "Category -1",
                            GameServerId = -2,
                            RuTitle = "Категория -1",
                            UpdatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045)
                        },
                        new
                        {
                            Id = -2,
                            CreatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            EnTitle = "Category -2",
                            GameServerId = -4,
                            RuTitle = "Категория -2",
                            UpdatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045)
                        },
                        new
                        {
                            Id = -3,
                            CreatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            EnTitle = "Category -3",
                            GameServerId = -4,
                            RuTitle = "Категория -3",
                            UpdatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045)
                        },
                        new
                        {
                            Id = -4,
                            CreatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            EnTitle = "Category -4",
                            GameServerId = -4,
                            RuTitle = "Категория -4",
                            UpdatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045)
                        },
                        new
                        {
                            Id = -5,
                            CreatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            EnTitle = "Category -5",
                            GameServerId = -1,
                            RuTitle = "Категория -5",
                            UpdatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045)
                        },
                        new
                        {
                            Id = -6,
                            CreatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            EnTitle = "Category -6",
                            GameServerId = -3,
                            RuTitle = "Категория -6",
                            UpdatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045)
                        },
                        new
                        {
                            Id = -7,
                            CreatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            EnTitle = "Category -7",
                            GameServerId = -4,
                            RuTitle = "Категория -7",
                            UpdatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045)
                        },
                        new
                        {
                            Id = -8,
                            CreatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            EnTitle = "Category -8",
                            GameServerId = -4,
                            RuTitle = "Категория -8",
                            UpdatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045)
                        },
                        new
                        {
                            Id = -9,
                            CreatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            EnTitle = "Category -9",
                            GameServerId = -4,
                            RuTitle = "Категория -9",
                            UpdatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045)
                        },
                        new
                        {
                            Id = -10,
                            CreatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            EnTitle = "Category -10",
                            GameServerId = -3,
                            RuTitle = "Категория -10",
                            UpdatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045)
                        });
                });

            modelBuilder.Entity("Entities.Models.GameServer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("GameServers");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            Title = "Infinity",
                            UpdatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045)
                        },
                        new
                        {
                            Id = -2,
                            CreatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            Title = "Unfinity",
                            UpdatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045)
                        },
                        new
                        {
                            Id = -3,
                            CreatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            Title = "Ozone",
                            UpdatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045)
                        },
                        new
                        {
                            Id = -4,
                            CreatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            Title = "Arcmagic",
                            UpdatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045)
                        });
                });

            modelBuilder.Entity("Entities.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Coins")
                        .HasColumnType("integer");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<double>("Discount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("DiscountEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ECoins")
                        .HasColumnType("integer");

                    b.Property<string>("EnTitle")
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<string>("RuTitle")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = new Guid("51bfc407-478a-404d-a5a8-c6b6d5bc8d60"),
                            Coins = 26,
                            Count = 4,
                            CreatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            Discount = 0.0,
                            DiscountEndDate = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045),
                            ECoins = 0,
                            EnTitle = "Item -1",
                            Icon = "Icon",
                            RuTitle = "Предмет -1",
                            UpdatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045)
                        },
                        new
                        {
                            Id = new Guid("67c5c6a7-d547-40a8-9699-850d41ff168a"),
                            Coins = 84,
                            Count = 8,
                            CreatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            Discount = 0.0,
                            DiscountEndDate = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045),
                            ECoins = 0,
                            EnTitle = "Item -2",
                            Icon = "Icon",
                            RuTitle = "Предмет -2",
                            UpdatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045)
                        },
                        new
                        {
                            Id = new Guid("8c73e29e-81b5-46fe-b1da-334133355320"),
                            Coins = 26,
                            Count = 9,
                            CreatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            Discount = 0.0,
                            DiscountEndDate = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045),
                            ECoins = 0,
                            EnTitle = "Item -3",
                            Icon = "Icon",
                            RuTitle = "Предмет -3",
                            UpdatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045)
                        },
                        new
                        {
                            Id = new Guid("b7531636-8db0-40e1-91b0-08df652fcb5f"),
                            Coins = 83,
                            Count = 1,
                            CreatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            Discount = 0.0,
                            DiscountEndDate = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045),
                            ECoins = 0,
                            EnTitle = "Item -4",
                            Icon = "Icon",
                            RuTitle = "Предмет -4",
                            UpdatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045)
                        },
                        new
                        {
                            Id = new Guid("95d03040-46ca-42e6-bc32-6aae87c3e1ac"),
                            Coins = 30,
                            Count = 2,
                            CreatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            Discount = 0.0,
                            DiscountEndDate = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045),
                            ECoins = 0,
                            EnTitle = "Item -5",
                            Icon = "Icon",
                            RuTitle = "Предмет -5",
                            UpdatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045)
                        },
                        new
                        {
                            Id = new Guid("cdedb443-907b-4a75-8941-3ba021aea0bc"),
                            Coins = 95,
                            Count = 8,
                            CreatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            Discount = 0.0,
                            DiscountEndDate = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045),
                            ECoins = 0,
                            EnTitle = "Item -6",
                            Icon = "Icon",
                            RuTitle = "Предмет -6",
                            UpdatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045)
                        },
                        new
                        {
                            Id = new Guid("8da7ebea-8c10-4088-b56e-f26eb15f81a4"),
                            Coins = 97,
                            Count = 6,
                            CreatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            Discount = 0.0,
                            DiscountEndDate = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045),
                            ECoins = 0,
                            EnTitle = "Item -7",
                            Icon = "Icon",
                            RuTitle = "Предмет -7",
                            UpdatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045)
                        },
                        new
                        {
                            Id = new Guid("830a0946-4f90-462d-b6ce-63b7707ce8b5"),
                            Coins = 48,
                            Count = 4,
                            CreatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            Discount = 0.0,
                            DiscountEndDate = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045),
                            ECoins = 0,
                            EnTitle = "Item -8",
                            Icon = "Icon",
                            RuTitle = "Предмет -8",
                            UpdatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045)
                        },
                        new
                        {
                            Id = new Guid("7c003f7e-d2c2-4ab0-8a6b-2e4f25a62c6a"),
                            Coins = 51,
                            Count = 8,
                            CreatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            Discount = 0.0,
                            DiscountEndDate = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045),
                            ECoins = 0,
                            EnTitle = "Item -9",
                            Icon = "Icon",
                            RuTitle = "Предмет -9",
                            UpdatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045)
                        },
                        new
                        {
                            Id = new Guid("85843659-e96f-4549-9c48-266c9333a088"),
                            Coins = 14,
                            Count = 2,
                            CreatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            Discount = 0.0,
                            DiscountEndDate = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045),
                            ECoins = 0,
                            EnTitle = "Item -10",
                            Icon = "Icon",
                            RuTitle = "Предмет -10",
                            UpdatedAt = new DateTime(2020, 8, 14, 22, 59, 31, 696, DateTimeKind.Utc).AddTicks(8045)
                        });
                });

            modelBuilder.Entity("Entities.Models.ItemCategory", b =>
                {
                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.HasKey("ItemId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ItemCategories");

                    b.HasData(
                        new
                        {
                            ItemId = new Guid("51bfc407-478a-404d-a5a8-c6b6d5bc8d60"),
                            CategoryId = -1
                        },
                        new
                        {
                            ItemId = new Guid("67c5c6a7-d547-40a8-9699-850d41ff168a"),
                            CategoryId = -2
                        },
                        new
                        {
                            ItemId = new Guid("8c73e29e-81b5-46fe-b1da-334133355320"),
                            CategoryId = -3
                        },
                        new
                        {
                            ItemId = new Guid("b7531636-8db0-40e1-91b0-08df652fcb5f"),
                            CategoryId = -4
                        },
                        new
                        {
                            ItemId = new Guid("95d03040-46ca-42e6-bc32-6aae87c3e1ac"),
                            CategoryId = -5
                        },
                        new
                        {
                            ItemId = new Guid("cdedb443-907b-4a75-8941-3ba021aea0bc"),
                            CategoryId = -6
                        },
                        new
                        {
                            ItemId = new Guid("8da7ebea-8c10-4088-b56e-f26eb15f81a4"),
                            CategoryId = -7
                        },
                        new
                        {
                            ItemId = new Guid("830a0946-4f90-462d-b6ce-63b7707ce8b5"),
                            CategoryId = -8
                        },
                        new
                        {
                            ItemId = new Guid("7c003f7e-d2c2-4ab0-8a6b-2e4f25a62c6a"),
                            CategoryId = -9
                        },
                        new
                        {
                            ItemId = new Guid("85843659-e96f-4549-9c48-266c9333a088"),
                            CategoryId = -10
                        });
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<string>("Cape")
                        .HasColumnType("text");

                    b.Property<long?>("Coins")
                        .HasColumnType("bigint");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("Econs")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Skin")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Uuid")
                        .HasColumnType("character varying(36)")
                        .HasMaxLength(36);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Entities.Models.Category", b =>
                {
                    b.HasOne("Entities.Models.GameServer", "GameServer")
                        .WithMany("Categories")
                        .HasForeignKey("GameServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.ItemCategory", b =>
                {
                    b.HasOne("Entities.Models.Category", "Category")
                        .WithMany("ItemCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Item", "Item")
                        .WithMany("ItemCategories")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
