// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Entities.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20200813135159_Shop")]
    partial class Shop
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Entities.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("EnTitle")
                        .HasColumnType("text");

                    b.Property<int?>("GameServerId")
                        .HasColumnType("integer");

                    b.Property<string>("RuTitle")
                        .HasColumnType("text");

                    b.Property<int>("ServerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("GameServerId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            EnTitle = "Category 1",
                            RuTitle = "Категория 1",
                            ServerId = 1,
                            UpdatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            EnTitle = "Category 2",
                            RuTitle = "Категория 2",
                            ServerId = 4,
                            UpdatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            EnTitle = "Category 3",
                            RuTitle = "Категория 3",
                            ServerId = 2,
                            UpdatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            EnTitle = "Category 4",
                            RuTitle = "Категория 4",
                            ServerId = 3,
                            UpdatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            EnTitle = "Category 5",
                            RuTitle = "Категория 5",
                            ServerId = 1,
                            UpdatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            EnTitle = "Category 6",
                            RuTitle = "Категория 6",
                            ServerId = 4,
                            UpdatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            EnTitle = "Category 7",
                            RuTitle = "Категория 7",
                            ServerId = 2,
                            UpdatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            EnTitle = "Category 8",
                            RuTitle = "Категория 8",
                            ServerId = 2,
                            UpdatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            EnTitle = "Category 9",
                            RuTitle = "Категория 9",
                            ServerId = 3,
                            UpdatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            EnTitle = "Category 10",
                            RuTitle = "Категория 10",
                            ServerId = 3,
                            UpdatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116)
                        });
                });

            modelBuilder.Entity("Entities.Models.GameServer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("GameServers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            Title = "Infinity",
                            UpdatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            Title = "Unfinity",
                            UpdatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            Title = "Ozone",
                            UpdatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            Title = "Arcmagic",
                            UpdatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116)
                        });
                });

            modelBuilder.Entity("Entities.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Coins")
                        .HasColumnType("integer");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<double>("Discount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("DiscountEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ECoins")
                        .HasColumnType("integer");

                    b.Property<string>("EnTitle")
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<string>("RuTitle")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f47c540b-caf4-4a6e-91ac-b5db5716971e"),
                            Coins = 80,
                            Count = 5,
                            CreatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            Discount = 0.0,
                            DiscountEndDate = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116),
                            ECoins = 0,
                            EnTitle = "Item 1",
                            Icon = "Icon",
                            RuTitle = "Предмет 1",
                            UpdatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116)
                        },
                        new
                        {
                            Id = new Guid("2c32eb66-2a05-49f1-b894-bf48fc0bfee5"),
                            Coins = 28,
                            Count = 3,
                            CreatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            Discount = 0.0,
                            DiscountEndDate = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116),
                            ECoins = 0,
                            EnTitle = "Item 2",
                            Icon = "Icon",
                            RuTitle = "Предмет 2",
                            UpdatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116)
                        },
                        new
                        {
                            Id = new Guid("7e1294d3-b9bc-442d-8da7-7087fc801222"),
                            Coins = 17,
                            Count = 9,
                            CreatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            Discount = 0.0,
                            DiscountEndDate = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116),
                            ECoins = 0,
                            EnTitle = "Item 3",
                            Icon = "Icon",
                            RuTitle = "Предмет 3",
                            UpdatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116)
                        },
                        new
                        {
                            Id = new Guid("2af07970-00e2-4623-a370-e8e5d8ec5797"),
                            Coins = 69,
                            Count = 5,
                            CreatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            Discount = 0.0,
                            DiscountEndDate = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116),
                            ECoins = 0,
                            EnTitle = "Item 4",
                            Icon = "Icon",
                            RuTitle = "Предмет 4",
                            UpdatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116)
                        },
                        new
                        {
                            Id = new Guid("62b5b7db-d52e-48d1-aa9b-ec50ad46fe59"),
                            Coins = 61,
                            Count = 1,
                            CreatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            Discount = 0.0,
                            DiscountEndDate = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116),
                            ECoins = 0,
                            EnTitle = "Item 5",
                            Icon = "Icon",
                            RuTitle = "Предмет 5",
                            UpdatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116)
                        },
                        new
                        {
                            Id = new Guid("23971dcb-fd37-4df5-961b-329e6488ff5f"),
                            Coins = 74,
                            Count = 3,
                            CreatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            Discount = 0.0,
                            DiscountEndDate = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116),
                            ECoins = 0,
                            EnTitle = "Item 6",
                            Icon = "Icon",
                            RuTitle = "Предмет 6",
                            UpdatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116)
                        },
                        new
                        {
                            Id = new Guid("deae84c9-21a6-4331-9ac1-8afca4bfb6d6"),
                            Coins = 82,
                            Count = 8,
                            CreatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            Discount = 0.0,
                            DiscountEndDate = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116),
                            ECoins = 0,
                            EnTitle = "Item 7",
                            Icon = "Icon",
                            RuTitle = "Предмет 7",
                            UpdatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116)
                        },
                        new
                        {
                            Id = new Guid("204e41c7-040e-4904-8473-4c6a1b01e86c"),
                            Coins = 37,
                            Count = 5,
                            CreatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            Discount = 0.0,
                            DiscountEndDate = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116),
                            ECoins = 0,
                            EnTitle = "Item 8",
                            Icon = "Icon",
                            RuTitle = "Предмет 8",
                            UpdatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116)
                        },
                        new
                        {
                            Id = new Guid("854826f3-eb47-4fc1-a1dd-3810e3784e63"),
                            Coins = 77,
                            Count = 10,
                            CreatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            Discount = 0.0,
                            DiscountEndDate = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116),
                            ECoins = 0,
                            EnTitle = "Item 9",
                            Icon = "Icon",
                            RuTitle = "Предмет 9",
                            UpdatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116)
                        },
                        new
                        {
                            Id = new Guid("d4ed8bed-fa7c-444f-807e-b75b67b15f40"),
                            Coins = 65,
                            Count = 1,
                            CreatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116),
                            CreatorId = new Guid("95024899-0ae4-4916-bdf4-7cd55c11128b"),
                            Discount = 0.0,
                            DiscountEndDate = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116),
                            ECoins = 0,
                            EnTitle = "Item 10",
                            Icon = "Icon",
                            RuTitle = "Предмет 10",
                            UpdatedAt = new DateTime(2020, 8, 13, 13, 51, 58, 815, DateTimeKind.Utc).AddTicks(8116)
                        });
                });

            modelBuilder.Entity("Entities.Models.ItemCategory", b =>
                {
                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.HasKey("ItemId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ItemCategories");

                    b.HasData(
                        new
                        {
                            ItemId = new Guid("f47c540b-caf4-4a6e-91ac-b5db5716971e"),
                            CategoryId = 1
                        },
                        new
                        {
                            ItemId = new Guid("2c32eb66-2a05-49f1-b894-bf48fc0bfee5"),
                            CategoryId = 2
                        },
                        new
                        {
                            ItemId = new Guid("7e1294d3-b9bc-442d-8da7-7087fc801222"),
                            CategoryId = 3
                        },
                        new
                        {
                            ItemId = new Guid("2af07970-00e2-4623-a370-e8e5d8ec5797"),
                            CategoryId = 4
                        },
                        new
                        {
                            ItemId = new Guid("62b5b7db-d52e-48d1-aa9b-ec50ad46fe59"),
                            CategoryId = 5
                        },
                        new
                        {
                            ItemId = new Guid("23971dcb-fd37-4df5-961b-329e6488ff5f"),
                            CategoryId = 6
                        },
                        new
                        {
                            ItemId = new Guid("deae84c9-21a6-4331-9ac1-8afca4bfb6d6"),
                            CategoryId = 7
                        },
                        new
                        {
                            ItemId = new Guid("204e41c7-040e-4904-8473-4c6a1b01e86c"),
                            CategoryId = 8
                        },
                        new
                        {
                            ItemId = new Guid("854826f3-eb47-4fc1-a1dd-3810e3784e63"),
                            CategoryId = 9
                        },
                        new
                        {
                            ItemId = new Guid("d4ed8bed-fa7c-444f-807e-b75b67b15f40"),
                            CategoryId = 10
                        });
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<string>("Cape")
                        .HasColumnType("text");

                    b.Property<long?>("Coins")
                        .HasColumnType("bigint");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("Econs")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Skin")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Uuid")
                        .HasColumnType("character varying(36)")
                        .HasMaxLength(36);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Entities.Models.Category", b =>
                {
                    b.HasOne("Entities.Models.GameServer", null)
                        .WithMany("Categories")
                        .HasForeignKey("GameServerId");
                });

            modelBuilder.Entity("Entities.Models.ItemCategory", b =>
                {
                    b.HasOne("Entities.Models.Category", "Category")
                        .WithMany("ItemCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Item", "Item")
                        .WithMany("ItemCategories")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
